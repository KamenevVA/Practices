#include <iostream>
using namespace std;

// Проанализируем условие задачи. Из условия можно логически предположить, что последовательность заканчивается элементом, который задаёт пользователь, т.к. иного в условии не сказано. Обозначим этот элемент как N.
// Поскольку этот элемент мы получаем от пользователя, нам понадобится переменная и обработка стандартного пользовательного ввода для получения значения этой переменной. Переменную обозначим как n.
// Рассмотрим элементы последовательности. Каждый элемент представляет собой произведение натуральных чисел. Отметим, что первый и последний элементы произведения отличаются ровно в 2 раза. Остальные элементы произведения получаются путём увеличения предыдущего элемента на единицу вплоть до указанного выше значения.
// Исходя из данных посылок, мы можем определить, что для решения задачи оптимально использовать циклы. Первый цикл должен перебирать натуральные числа от 1 до N(т.к., исходя из выявленной закономерности, каждый первый элемент произведения совпадает с соответствующим натуральным числом( например 1, 2 и т.д.).
// На каждом шаге этого цикла мы должны задать начальное значение произведения как 1. Далее нам необходим вложенный цикл для вычисления самого произведения. Вложенный цикл начинается со значения текущего элемента внешнего цикла(1) и продолжается, пока значение не станет равный 2i. На каждом шаге вложенного цикла текущее значение произведения умножается на текущее значение переменной цикла(j).
// После выхода из вложенного цикла на каждом шаге внешнего цикла мы увеличиваем сумму на полученное произведение.
// После достижения внешним циклом значения n, мы должны вывести (по условию) сумму. Делаем это с помощью стандартного вывода.
// По  результатам анализа нам необходимы три целочисленные переменные (n - количество элементов; s - сумма; р - произвидение) и два вложенных цикла. Отразим алгорится на блок-схеме.


int n;
int sum, p = 0;

int main()
{
	cin >> n;
	sum = 0;
	for (int i = 1; i <= n; i++)
	{
		p = 1;
		for (int j = i; j <= i * 2; j++)
		{
			cout << j << '*';
			p *= j;
		}
		cout << '+';
	    sum += p;
	}
	cout << '=';
	cout << sum;
	return 0;
}